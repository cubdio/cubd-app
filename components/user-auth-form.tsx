"use client";

import * as React from "react";
import { useSearchParams } from "next/navigation";
import { zodResolver } from "@hookform/resolvers/zod";
import { useForm } from "react-hook-form";
import * as z from "zod";

import { cn } from "@/lib/utils";
import { userAuthSchema } from "@/lib/validations/auth";
import { buttonVariants } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { toast } from "@/components/ui/use-toast";
import { Icons } from "@/components/icons";

import { createClient } from "@/lib/supabase/client";

// Defining the props structure for the UserAuthForm component
interface UserAuthFormProps extends React.HTMLAttributes<HTMLDivElement> {}

// Creating a a new TypeScript type based on the zod schema, in this case, email is a string, refer to lib/validations/auth.ts
type FormData = z.infer<typeof userAuthSchema>;

// Renders a user auth form
export function UserAuthForm({ className, ...props }: UserAuthFormProps) {
  const supabase = createClient();

  // Extracting functoins and states from the useForm React Hook Form hook
  const {
    register, // register is a callback function, it's the core API of React Hook Form, it registers inputs to the form
    handleSubmit, // handleSubmit retreives the form data on submit
    formState: { errors }, // Reading errors from form
  } = useForm<FormData>({
    resolver: zodResolver(userAuthSchema), // Resolver for Zod schema validation, ensures that the form data is the correct type
  });

  // States to manage loading indicators (icons, buttons etc.) for different auth methods
  const [isLoading, setIsLoading] = React.useState<boolean>(false);
  const [isGoogleLoading, setIsGoogleLoading] = React.useState<boolean>(false);
  const searchParams = useSearchParams();

  // Handles email sign in
  async function onSubmit(data: FormData) {
    setIsLoading(true);

    // Attempting to sign in using Supabase with OTP
    const signInResult = await supabase.auth.signInWithOtp({
      email: data.email,
      options: {
        // set this to false if you do not want the user to be automatically signed up
        shouldCreateUser: false,
        //
        emailRedirectTo: "http://localhost:3000/dashboard",
      },
    });

    setIsLoading(false);

    // Handling sign in result and showing toast notifications
    if (!signInResult.error) {
      // If sign in was successful (no error), show a success toast
      return toast({
        title: "Check your email",
        description:
          "We sent you a login link. Be sure to check your spam too.",
      });
    }

    // If sign in failed (error exists), show an error toast
    return toast({
      title: "Something went wrong.",
      description: "Your sign in request failed. Please try again.",
      variant: "destructive",
    });
  }

  // Handles Google sign in
  async function onGoogleSignIn() {
    setIsGoogleLoading(true);

    // Sign in with Google OAuth using Supabase
    const { data, error } = await supabase.auth.signInWithOAuth({
      provider: "google",
      options: {
        queryParams: {
          redirectTo: "http://localhost:3000/auth/callback",
        },
      },
    });

    // Handling Google sign-in result
    setIsGoogleLoading(false);
    if (error) {
      toast({
        title: "Something went wrong.",
        description: "Your sign in request failed. Please try again.",
        variant: "destructive",
      });
    }
  }

  return (
    // Container div for the form, with class names generated by the cn function and any additional props, for example, the login page passes a className that styles text
    <div className={cn("grid gap-6", className)} {...props}>
      {/* Form element with an onSubmit event handler tied to the handleSubmit function */}
      <form onSubmit={handleSubmit(onSubmit)}>
        {/* Grid container for form elements with a vertical gap */}
        <div className="grid gap-2">
          {/* Container for the email input field with a smaller gap */}
          <div className="grid gap-1">
            {/* Label for the email input field, hidden for screen readers only */}
            <Label className="sr-only" htmlFor="email">
              Email
            </Label>

            {/* Email input field */}
            <Input
              id="email"
              placeholder="name@example.com"
              type="email"
              autoCapitalize="none"
              autoComplete="email"
              autoCorrect="off"
              disabled={isLoading || isGoogleLoading} // Disables the input if either loading state is true
              {...register("email")} // Registers the input in the react-hook-form system
            />

            {/* Error message for the email field, displayed only if there's an error */}
            {errors?.email && (
              <p className="px-1 text-xs text-red-600">
                {errors.email.message}
              </p>
            )}
          </div>

          {/* Button to submit the form */}
          <button className={cn(buttonVariants())} disabled={isLoading}>
            {/* Spinner icon shown when the form is in the loading state */}
            {isLoading && (
              <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
            )}
            Sign In with Email
          </button>
        </div>
      </form>

      {/* Divider and text indicating an alternative sign-in option */}
      <div className="relative">
        <div className="absolute inset-0 flex items-center">
          <span className="w-full border-t" /> {/* Horizontal line */}
        </div>
        <div className="relative flex justify-center text-xs uppercase">
          <span className="bg-background px-2 text-muted-foreground">
            Or continue with
          </span>
        </div>
      </div>

      {/* Button for Google sign-in */}
      <button
        type="button"
        className={cn(buttonVariants({ variant: "outline" }))}
        onClick={onGoogleSignIn} // Event handler for Google sign-in
        disabled={isLoading || isGoogleLoading} // Disables the button if either loading state is true
      >
        {/* Spinner or Google icon depending on the Google loading state */}
        {isGoogleLoading ? (
          <Icons.spinner className="mr-2 h-4 w-4 animate-spin" />
        ) : (
          <Icons.google className="mr-2 h-4 w-4" />
        )}
        Google
      </button>
    </div>
  );
}
